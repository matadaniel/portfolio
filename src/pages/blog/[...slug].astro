---
import type { InferGetStaticPropsType } from 'astro'
import { getCollection } from 'astro:content'
import Section from '../../components/Section.astro'
import Layout from '../../layouts/Layout.astro'

export async function getStaticPaths() {
  const blogEntries = (await getCollection('blog')).sort(
    (a, b) =>
      (a.data.isDraft ? a.data.draftDate : a.data.publishDate).getTime() -
      (b.data.isDraft ? b.data.draftDate : b.data.publishDate).getTime()
  )

  const series: Record<string, { name: string; entries: typeof blogEntries }> = {}
  for (const entry of blogEntries) {
    const path = entry.id.split('/')

    if (path.length > 1) {
      if (series[path[0]]) series[path[0]].entries.push(entry)
      else
        series[path[0]] = {
          name: path[0]
            .split('-')
            .map(word => word[0].toUpperCase() + word.slice(1))
            .join(' '),
          entries: [entry],
        }
    }
  }

  const getSeries = (id: string) => {
    const path = id.split('/')

    if (path.length > 1) {
      return { series: series[path[0]] }
    }
  }

  const filteredBlogEntries = blogEntries.filter(entry => !entry.data.isDraft)

  return (import.meta.env.PROD ? filteredBlogEntries : blogEntries).map(entry => ({
    params: { slug: entry.slug },
    props: {
      entry,
      ...getSeries(entry.id),
    },
  }))
}

const { entry, series } = Astro.props as InferGetStaticPropsType<typeof getStaticPaths>
const { Content } = await entry.render()
---

<Layout title={`${entry.data.title} | Daniel Mata`}>
  <main class="flex flex-col items-center">
    <Section class="my-0 py-32">
      {
        series && series.entries.length > 1 && (
          <div class="mb-8 pb-8">
            This post is part of the {series.name} series:
            <ol>
              {series.entries.map(post => {
                const pathname = `/blog/${post.slug}`

                return (
                  <li>
                    {pathname === Astro.url.pathname ? (
                      <span class="font-medium">{post.data.title} &larr;</span>
                    ) : post.data.isDraft ? (
                      <span class="font-medium">{post.data.title} (coming soon)</span>
                    ) : (
                      <a href={pathname}>{post.data.title}</a>
                    )}
                  </li>
                )
              })}
            </ol>
          </div>
        )
      }
      <Content date={entry.data.isDraft ? entry.data.draftDate : entry.data.publishDate} />
    </Section>
  </main>
</Layout>

<script src="../../components/root.tsx"></script>
